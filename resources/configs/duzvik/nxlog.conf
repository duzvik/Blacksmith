Panic Soft
#NoFreeOnExit TRUE

define ROOT     C:\Program Files (x86)\nxlog
define CERTDIR  %ROOT%\cert
define CONFDIR  %ROOT%\conf
define LOGDIR   %ROOT%\data
define LOGFILE  %LOGDIR%\nxlog.log
LogFile %LOGFILE%

Moduledir %ROOT%\modules
CacheDir  %ROOT%\data
Pidfile   %ROOT%\data\nxlog.pid
SpoolDir  %ROOT%\data

<Extension _json>
    Module		xm_json
</Extension>


<Input in>
    Module      im_msvistalog
    Query <QueryList>\
	<Query Id="0">\
	<Select Path="Security">*</Select>\
	<Select Path="Windows PowerShell">*</Select>\
	<Select Path="Microsoft-Windows-Sysmon/Operational">*</Select>\
	</Query>\
	</QueryList>

    Exec $DeviceVendor = "Microsoft";
    Exec $DeviceProduct = "EventLog";
    Exec $ExecMarker = "marker";

    # Only Sysmon Event line has ProcessID populated, so we rename
    Exec if $SourceName =~ /Sysmon/ rename_field("ProcessID","SysmonProcessId");
    # If there's a ProcessId field in the message, extract it out
    Exec if $Message =~ /ProcessId\:\s+(\d+)/ $ProcessId=$1;

    Exec $raw_event = to_json();
</Input>

<Output rin> 
 Module om_tcp 
 Host IPADDRESS
 Port PORT
 Exec to_json(); 
 $message = $raw_event;
</Output> 

<Output out_file>
    Module      om_file
    File 	"C:\snarelogs\" + $Hostname + "_" + $DeviceProduct + ".txt"
    #Exec	if out_file->file_size() > 200K \
    #            { \
    #               $newfile = "C:\snarelogs\" + $Hostname + "_" + $DeviceProduct + "_" + strftime(now(), "%Y_%m_%d_%H%M%S") + ".txt"; \
    #               out_file->rotate_to($newfile); \
    #            }
</Output>

<Route 1>
    Path in => out_file
</Route>

<Route 2>
    Path in => rin
</Route>
