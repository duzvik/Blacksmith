{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            },
            "defaultValue": "[utcNow()]"
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 12,
            "metadata": {
                "description": "Password for the all Virtual machines. The password must be at least 8 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter"
            }
        },
        "adfsUsername": {
            "type": "string",
            "metadata": {
                "description": "ADFS user account name"
            }
        },
        "adfsPassword": {
            "type": "securestring",
            "minLength": 12,
            "metadata": {
                "description": "Password for ADFS user account. The password must be at least 8 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter"
            }
        },
        "remoteAccessMode": {
            "type": "string",
            "metadata": {
                "description": "Do you want to restrict access to your environment by a Public IP or set up an Azure Bastion Host. If the former, make sure you add your public IP address to the variable 'allowedIPAddresses'"
            },
            "defaultValue": "AllowPublicIP",
            "allowedValues": [
                "AllowPublicIP",
                "AzureBastionHost"
            ]
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to this deployment"
            },
            "defaultValue": "*"
        },
        "azureBastionHostName": {
            "type": "string",
            "metadata": {
                "description": "Name of Azure Bastion Host assigned to the Virtual network in this template"
            },
            "defaultValue": "WinADBastionHost"
        },
        "azureBastionSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the Azure Bastion service"
            },
            "defaultValue": "192.168.3.0/27"
        },
        "domainFQDN": {
            "type": "string",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created"
            },
            "defaultValue": "blacksmith.local"
        },
        "domainJoinOptions": {
            "type": "int",
            "metadata": {
                "description": "Set of bit flags that define the join options. Default value of 3 is a combination of NETSETUP_JOIN_DOMAIN (0x00000001) & NETSETUP_ACCT_CREATE (0x00000002) i.e. will join the domain and create the account on the domain. For more information see https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx"
            },
            "defaultValue": 3
        },
        "numberOfWorkstations": {
            "type": "int",
            "minValue": 1,
            "maxValue": 100,
            "metadata": {
                "description": "Number of VMs to deploy"
            },
            "defaultValue": 1
        },
        "vmNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for the name of your virtual machine. Template will add a number starting from 5."
            },
            "defaultValue": "WORKSTATION"
        },
        "windowsDesktopSKU": {
            "type": "string",
            "defaultValue": "19h2-pro",
            "allowedValues": [
                "19h1-pro",
                "19h2-pro",
                "rs4-pro",
                "rs5-pro"
            ],
            "metadata": {
                "description": "The Windows version for the Desktop VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsDesktopVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "windowsServerSKU": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2019-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the Server VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsServerVersion": {
            "type": "string",
            "defaultValue": "latest",
            "allowedValues": [
                "17763.1217.2005081535",
                "17763.1282.2006061952",
                "17763.1339.2007101755",
                "17763.1397.2008070242",
                "17763.1457.2009030514",
                "latest"
            ]
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_A2",
                "Standard_A3",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2_v2",
                "Standard_A4_v2"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "enableMonitoringAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to enable the Microsoft Log Analytics Monitoring agent? "
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace ID"
            }
        },
        "workspaceKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace keys"
            }
        },
        "enableSysmon": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to install Sysmon on the endpoint?"
            }
        },
        "enableAntimalware": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Antimalware extension to filter out some folders and file extensions from the Windows Defender service"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "vnet-win"
        },
        "virtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.168.0.0/16"
        },
        "subnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.168.2.0/24"
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "snet-win"
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/duzvik/Blacksmith/master/",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",
        "virtualNetworkName": "[parameters('virtualNetworkName')]",
        "virtualNetworkAddressRange": "[parameters('virtualNetworkAddressRange')]",
        "subnetName": "[parameters('subnetName')]",
        "subnetRange": "[parameters('subnetRange')]",
        "vmPrivateIPPrefixArray": "[take(split(variables('subnetRange'),'.'),3)]",
        "vmPrivateIPAddresPrefix": "[format('{0}.{1}.{2}.',variables('vmPrivateIPPrefixArray')[0], variables('vmPrivateIPPrefixArray')[1], variables('vmPrivateIPPrefixArray')[2])]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
        "nsg-default-name": "nsg-rdp-allow",
        "nsg-id": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]"
        },
        "networkSecurityGroup": "[if(equals(parameters('remoteAccessMode'), 'AllowPublicIP'), variables('nsg-id'), json('null'))]",
        "subnets": [
            {
                "name": "[variables('subnetName')]",
                "properties": {
                    "addressPrefix": "[variables('subnetRange')]",
                    "networkSecurityGroup": "[variables('networkSecurityGroup')]"
                }
            }
        ],
        "bastionSubnetName": "AzureBastionSubnet",
        "nsg-bastion-host-name": "nsg-bastion-host",
        "azureBastionSubnet": [
            {
                "name": "[variables('bastionSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('azureBastionSubnetRange')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
                    }
                }
            }
        ],
        "allSubnets": "[if(equals(parameters('remoteAccessMode'),'AzureBastionHost'), concat(variables('subnets'), variables('azureBastionSubnet')), variables('subnets'))]",
        "customScriptExTemplateUri": "[uri(parameters('_artifactsLocation'), concat('templates/azure/Win10-AD-ADFS/nestedtemplates/customScriptExtension.json', parameters('_artifactsLocationSasToken')))]",
        "customProtectedScriptExTemplateUri": "[uri(parameters('_artifactsLocation'), concat('templates/azure/Win10-AD-ADFS/nestedtemplates/customProtectedScriptExtension.json', parameters('_artifactsLocationSasToken')))]",
        "prepareBoxScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/misc/Prepare-Box.ps1', parameters('_artifactsLocationSasToken')))]",
        "setSecurityAuditingScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/auditing/Enable-WinAuditCategories.ps1', parameters('_artifactsLocationSasToken')))]",
        "setPowerShellLogging": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/auditing/Enable-PowerShell-Logging.ps1', parameters('_artifactsLocationSasToken')))]",
        "saclModule": "https://raw.githubusercontent.com/OTRF/Set-AuditRule/master/Set-AuditRule.ps1",
        "setSACLScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/auditing/Set-SACLs.ps1', parameters('_artifactsLocationSasToken')))]",
        "setIPAddressScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/misc/Set-StaticIP.ps1', parameters('_artifactsLocationSasToken')))]",
        "installAgentScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/endpoint-software/Install-Sysmon.ps1', parameters('_artifactsLocationSasToken')))]",
        "setWallPaperScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/misc/Set-WallPaper.ps1', parameters('_artifactsLocationSasToken')))]",
        "adDSCModules": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/active-directory/DSC/AD-ADFS/Install-AD-DSC-Modules.ps1', parameters('_artifactsLocationSasToken')))]",
        "adfsDSCModules": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/active-directory/DSC/AD-ADFS/Install-ADFS-DSC-Modules.ps1', parameters('_artifactsLocationSasToken')))]",
        "copy": [
            {
                "name": "allWinWKS",
                "count": "[parameters('numberOfWorkstations')]",
                "input": {
                    "tag": "workstation",
                    "vmName": "[concat(parameters('vmNamePrefix'),copyIndex('allWinWKS',6))]",
                    "os": "windows",
                    "subnetref": "[variables('subnetRef')]",
                    "ipAddress": "[concat(variables('vmPrivateIPAddresPrefix'),copyIndex('allWinWKS',6))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "MicrosoftWindowsDesktop",
                    "offer": "Windows-10",
                    "sku": "[parameters('windowsDesktopSKU')]",
                    "version": "[parameters('windowsDesktopVersion')]",
                    "extensionName": "SetupWinVM"
                }
            }
        ],
        "domainController": [
            {
                "tag": "domainController",
                "vmName": "DC01",
                "os": "windows",
                "subnetref": "[variables('subnetRef')]",
                "ipAddress": "[concat(variables('vmPrivateIPAddresPrefix'),'4')]",
                "vmSize": "[parameters('vmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]",
                "extensionName": "SetUpDC"
            }
        ],
        "adfsServer": [
            {
                "tag": "adfs",
                "vmName": "ADFS01",
                "os": "windows",
                "subnetref": "[variables('subnetRef')]",
                "ipAddress": "[concat(variables('vmPrivateIPAddresPrefix'),'5')]",
                "vmSize": "[parameters('vmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]",
                "extensionName": "SetUpADFS"
            }
        ],
        "allEndpoints": "[concat(variables('allWinWKS'), variables('domainController'), variables('adfsServer'))]",
        "domainNameArray": "[split(parameters('domainFQDN'),'.')]",
        "ouPath": "[concat('OU=Workstations; DC=', variables('domainNameArray')[0], '; DC=', variables('domainNameArray')[1])]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            "condition": "[equals(parameters('remoteAccessMode'), 'AllowPublicIP')]",
            "comments": "Default Network Security Group for Windows endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "[variables('nsg-default-name')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-3389",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "3389",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('remoteAccessMode'), 'AzureBastionHost')]",
            "comments": "Default Network Security Group for Windows endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "[variables('nsg-bastion-host-name')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHTTPsInbound",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "AllowGatewayManagerInbound",
                        "properties": {
                            "priority": 110,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "AllowSshRdpOutbound",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Outbound",
                            "destinationPortRanges": [
                                "22",
                                "3389"
                            ],
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork"
                        }
                    },
                    {
                        "name": "AllowAzureCloudOutbound",
                        "properties": {
                            "priority": 110,
                            "access": "Allow",
                            "direction": "Outbound",
                            "destinationPortRange": "443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "AzureCloud"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-02-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('virtualNetworkAddressRange')]"
                    ]
                },
                "subnets": "[variables('allSubnets')]"
            }
        },
        {
            "condition": "[equals(parameters('remoteAccessMode'),'AzureBastionHost')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[concat('pip-', parameters('azureBastionHostName'))]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "condition": "[equals(parameters('remoteAccessMode'),'AzureBastionHost')]",
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2020-05-01",
            "name": "[parameters('azureBastionHostName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', parameters('azureBastionHostName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', parameters('azureBastionHostName')))]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('virtualNetworkName'), variables('bastionSubnetName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('remoteAccessMode'),'AllowPublicIP')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[concat('pip-', variables('allEndpoints')[copyIndex('vmPublicIpCopy')].vmName)]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "vmPublicIpCopy",
                "count": "[length(variables('allEndpoints'))]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[toLower(concat(variables('allEndpoints')[copyIndex('vmPublicIpCopy')].vmName, '-', uniquestring(resourceGroup().id, parameters('utcValue'))))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-11-01",
            "name": "[concat('nic-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName)]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "copy": {
                "name": "vmNetworkInterfaceCopy",
                "count": "[length(variables('allEndpoints'))]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].ipAddress]",
                            "publicIPAddress": "[if(equals(parameters('remoteAccessMode'),'AllowPublicIP'), json(concat('{\"id\":', '\"', resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName)),'\"}')),json('null'))]",
                            "subnet": {
                                "id": "[variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].subnetref]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-10-01",
            "name": "[variables('allEndpoints')[copyIndex('vmVMCopy')].vmName]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic-', variables('allEndpoints')[copyIndex('vmVMCopy')].vmName))]"
            ],
            "copy": {
                "name": "vmVMCopy",
                "count": "[length(variables('allEndpoints'))]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('allEndpoints')[copyIndex('vmVMCopy')].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('allEndpoints')[copyIndex('vmVMCopy')].vmName]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('allEndpoints')[copyIndex('vmVMCopy')].publisher]",
                        "offer": "[variables('allEndpoints')[copyIndex('vmVMCopy')].offer]",
                        "sku": "[variables('allEndpoints')[copyIndex('vmVMCopy')].sku]",
                        "version": "[variables('allEndpoints')[copyIndex('vmVMCopy')].version]"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('nic-', variables('allEndpoints')[copyIndex('vmVMCopy')].vmName))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('allWinWKS')[copyIndex('InitialSetUpWKSCopy')].vmName, '/', variables('allWinWKS')[copyIndex('InitialSetUpWKSCopy')].extensionName)]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('allWinWKS')[copyIndex('InitialSetUpWKSCopy')].vmName)]"
            ],
            "copy": {
                "name": "InitialSetUpWKSCopy",
                "count": "[length(variables('allWinWKS'))]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.8",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/OTRF/Blacksmith/master/templates/azure/Win10-AD-ADFS/scripts/Set-Initial-Settings.ps1",
                        "[variables('prepareBoxScript')]",
                        "[variables('setSecurityAuditingScript')]",
                        "[variables('setPowerShellLogging')]",
                        "[variables('saclModule')]",
                        "[variables('setSACLScript')]",
                        "[variables('setIPAddressScript')]",
                        "[variables('setWallPaperScript')]"
                    ],
                    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Initial-Settings.ps1', ' ', '-ServerAddresses', ' ', variables('domainController')[0].ipAddress)]"
                },
                "protectedSettings": {}
            }
        },
        {
            "name": "[concat(variables('domainController')[0].vmName, '/', variables('domainController')[0].extensionName)]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/', variables('domainController')[0].vmName)]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.8",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/OTRF/Blacksmith/master/templates/azure/Win10-AD-ADFS/scripts/Set-Initial-Settings.ps1",
                        "[variables('adDSCModules')]",
                        "[variables('prepareBoxScript')]",
                        "[variables('setSecurityAuditingScript')]",
                        "[variables('setPowerShellLogging')]",
                        "[variables('saclModule')]",
                        "[variables('setSACLScript')]",
                        "[variables('setWallPaperScript')]"
                    ],
                    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Initial-Settings.ps1',' ', '-SetDC')]"
                },
                "protectedSettings": {}
            }
        },
        {
            "name": "[concat(variables('adfsServer')[0].vmName, '/', variables('adfsServer')[0].extensionName)]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/', variables('adfsServer')[0].vmName)]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.8",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/OTRF/Blacksmith/master/templates/azure/Win10-AD-ADFS/scripts/Set-Initial-Settings.ps1",
                        "[variables('adfsDSCModules')]",
                        "[variables('prepareBoxScript')]",
                        "[variables('setSecurityAuditingScript')]",
                        "[variables('setPowerShellLogging')]",
                        "[variables('saclModule')]",
                        "[variables('setSACLScript')]",
                        "[variables('setIPAddressScript')]",
                        "[variables('setWallPaperScript')]"
                    ],
                    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Initial-Settings.ps1',' ','-ServerAddresses',' ', variables('domainController')[0].ipAddress,' ','-SetADFS')]"
                },
                "protectedSettings": {}
            }
        },
        {
            "condition": "[parameters('enableSysmon')]",
            "name": "[concat(variables('allWinWKS')[copyIndex('vmSysmonSetUpCopy')].vmName, '-Sysmon')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "InitialSetUpWKSCopy"
            ],
            "copy": {
                "name": "vmSysmonSetupCopy",
                "count": "[length(variables('allWinWKS'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "[variables('allWinWKS')[copyIndex('vmSysmonSetupCopy')].extensionName]"
                    },
                    "commandToExecute": {
                        "value": "powershell -ExecutionPolicy Unrestricted -File ./Install-Sysmon.ps1"
                    },
                    "fileUris": {
                        "value": [
                            "[variables('installAgentScript')]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('allWinWKS')[copyIndex('vmSysmonSetupCopy')].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('enableSysmon')]",
            "name": "[concat(variables('domainController')[0].vmName, '-Sysmon')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('domainController')[0].vmName, variables('domainController')[0].extensionName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "[variables('domainController')[0].extensionName]"
                    },
                    "commandToExecute": {
                        "value": "powershell -ExecutionPolicy Unrestricted -File ./Install-Sysmon.ps1"
                    },
                    "fileUris": {
                        "value": [
                            "[variables('installAgentScript')]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('domainController')[0].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('enableSysmon')]",
            "name": "[concat(variables('adfsServer')[0].vmName, '-Sysmon')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('adfsServer')[0].vmName, variables('adfsServer')[0].extensionName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customProtectedScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "[variables('adfsServer')[0].extensionName]"
                    },
                    "commandToExecute": {
                        "value": "powershell -ExecutionPolicy Unrestricted -File ./Install-Sysmon.ps1"
                    },
                    "fileUris": {
                        "value": [
                            "[variables('installAgentScript')]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('adfsServer')[0].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('enableAntimalware')]",
            "name": "[concat(variables('allEndpoints')[copyIndex('vmAntiMalwareSetupCopy')].vmName, '/AntiMalware')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('allEndpoints')[copyIndex('vmAntiMalwareSetupCopy')].vmName)]"
            ],
            "copy": {
                "name": "vmAntiMalwareSetupCopy",
                "count": "[length(variables('allEndpoints'))]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Security",
                "type": "IaaSAntimalware",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "AntimalwareEnabled": true,
                    "Exclusions": {
                        "Extensions": ".bat;.exe;.dll;.ps1;.sct;.vbs;.hta;.py;.tmp;.csproj",
                        "Paths": "C:\\",
                        "Processes": "powershell.exe;sandcat.exe"
                    },
                    "RealtimeProtectionEnabled": "false",
                    "ScheduledScanSettings": {
                        "isEnabled": "false",
                        "scanType": "Quick",
                        "day": "8",
                        "time": "120"
                    }
                },
                "protectedSettings": null
            }
        },
        {
            "name": "[concat(variables('domainController')[0].vmName, '/CreateADForest')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('domainController')[0].vmName, variables('domainController')[0].extensionName)]",
                "[concat(variables('domainController')[0].vmName, '-Sysmon')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('domainController')[0].vmName, 'AntiMalware')]"
            ],
            "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.77",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "wmfVersion": "latest",
                    "configuration": {
                        "url": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/active-directory/DSC/AD-ADFS/Create-AD.zip', parameters('_artifactsLocationSasToken')))]",
                        "script": "Create-AD.ps1",
                        "function": "Create-AD"
                    },
                    "configurationArguments": {
                        "DomainFQDN": "[parameters('DomainFQDN')]",
                        "AdfsIPAddress": "[variables('adfsServer')[0].ipAddress]"
                    }
                },
                "protectedSettings": {
                    "configurationArguments": {
                        "AdminCreds": {
                            "UserName": "[parameters('adminUsername')]",
                            "Password": "[parameters('adminPassword')]"
                        },
                        "AdfsSvcCreds": {
                            "UserName": "[parameters('adfsUserName')]",
                            "Password": "[parameters('adfsPassword')]"
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('adfsServer')[0].vmName, '/EnableADFS')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('adfsServer')[0].vmName, variables('adfsServer')[0].extensionName)]",
                "[concat(variables('adfsServer')[0].vmName, '-Sysmon')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('adfsServer')[0].vmName, 'AntiMalware')]",
                "UpdateVNetDNS"
            ],
            "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.77",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "wmfVersion": "latest",
                    "configuration": {
                        "url": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/active-directory/DSC/AD-ADFS/Enable-ADFS.zip', parameters('_artifactsLocationSasToken')))]",
                        "script": "Enable-ADFS.ps1",
                        "function": "Enable-ADFS"
                    },
                    "configurationArguments": {
                        "DomainFQDN": "[parameters('domainFQDN')]",
                        "DCName": "[variables('domainController')[0].vmName]"
                    }
                },
                "protectedSettings": {
                    "configurationArguments": {
                        "AdminCreds": {
                            "UserName": "[parameters('adminUsername')]",
                            "Password": "[parameters('adminPassword')]"
                        }
                    }
                }
            }
        },
        {
            "name": "InstallADFS",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('adfsServer')[0].vmName, 'EnableADFS')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customProtectedScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "[variables('adfsServer')[0].extensionName]"
                    },
                    "commandToExecute": {
                        "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-ADFSFarm.ps1',' ', '-DomainFQDN',' ',parameters('DomainFQDN'),' ','-AdminUserName',' ',parameters('AdminUserName'),' ','-AdminPassword',' ',parameters('AdminPassword'),' ','-AdfsUserName',' ',parameters('AdfsUserName'),' ','-AdfsPassword',' ',parameters('AdfsPassword'))]"
                    },
                    "fileUris": {
                        "value": [
                            "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/active-directory/DSC/AD-ADFS/Set-ADFSFarm.ps1')]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('adfsServer')[0].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "name": "ConnectADFS2AWS",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('adfsServer')[0].vmName, 'InstallADFS')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customProtectedScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "[variables('adfsServer')[0].extensionName]"
                    },
                    "commandToExecute": {
                        "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Aws.ps1')]"
                    },
                    "AWS-SAML.ps1": {
                        "value": [
                            "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/active-directory/DSC/AD-ADFS/Aws.ps1')]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('adfsServer')[0].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "name": "UpdateVNetDNS",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('domainController')[0].vmName, 'CreateADForest')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('templates/azure/Win10-AD-ADFS/nestedtemplates/vnet-dns-server.json', parameters('_artifactsLocationSasToken')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "virtualNetworkName": {
                        "value": "[variables('virtualNetworkName')]"
                    },
                    "virtualNetworkAddressRange": {
                        "value": "[variables('virtualNetworkAddressRange')]"
                    },
                    "subnetName": {
                        "value": "[variables('subnetName')]"
                    },
                    "subnetRange": {
                        "value": "[variables('subnetRange')]"
                    },
                    "networkSecurityGroupId": {
                        "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]"
                    },
                    "DNSServerAddress": {
                        "value": [
                            "[variables('domainController')[0].ipAddress]"
                        ]
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "name": "ADSetup",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "UpdateVNetDNS"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "[variables('domainController')[0].extensionName]"
                    },
                    "commandToExecute": {
                        "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-AD.ps1',' ', '-domainFQDN',' ', parameters('domainFQDN'),' ', '-dcVMName',' ', variables('domainController')[0].vmName)]"
                    },
                    "fileUris": {
                        "value": [
                            "https://raw.githubusercontent.com/OTRF/Blacksmith/master/templates/azure/Win10-AD-ADFS/scripts/Set-AD.ps1",
                            "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/active-directory/Set-OUs.ps1')]",
                            "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/active-directory/Add-DomainUsers.ps1')]",
                            "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/auditing/Set-AuditSAMRemoteCalls.ps1')]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('domainController')[0].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('allWinWKS')[copyIndex('vmDomainJoinCopy')].vmName,'/joindomain')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "InitialSetUpWKSCopy",
                "vmSysmonSetupCopy",
                "UpdateVNetDNS"
            ],
            "copy": {
                "name": "vmDomainJoinCopy",
                "count": "[length(variables('allWinWKS'))]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "Name": "[parameters('domainFQDN')]",
                    "User": "[concat(parameters('domainFQDN'), '\\', parameters('adminUsername'))]",
                    "Restart": "true",
                    "Options": "[parameters('domainJoinOptions')]",
                    "OUPath": "[variables('ouPath')]"
                },
                "protectedSettings": {
                    "Password": "[parameters('adminPassword')]"
                }
            }
        },
        {
            "condition": "[parameters('enableMonitoringAgent')]",
            "name": "[concat(variables('allEndpoints')[copyIndex('vmMMASetUpCopy')].vmName, '/OMSExtension')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "vmDomainJoinCopy",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('adfsServer')[0].vmName, 'EnableADFS')]"
            ],
            "copy": {
                "name": "vmMMASetUpCopy",
                "count": "[length(variables('allEndpoints'))]"
            },
            "properties": {
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "type": "MicrosoftMonitoringAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "workspaceId": "[parameters('workspaceId')]"
                },
                "protectedSettings": {
                    "workspaceKey": "[parameters('workspaceKey')]"
                }
            }
        }
    ],
    "outputs": {
        "virtualNetworkName": {
            "type": "string",
            "value": "[variables('virtualNetworkName')]"
        },
        "virtualNetworkId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        },
        "allWinVMsDeployed": {
            "type": "array",
            "value": "[variables('allEndpoints')]"
        }
    }
}
